#!/bin/bash
# Bash aliases

# NOTE from `man bash`:
# > If the last character of the alias value is a space or tab character, then
# > the next command word following the alias is also checked for alias
# > expansion.

# Allow alias expansion for the common case of "sudo <alias>"
alias sudo='sudo '

# Confirm before overwriting
alias mv='mv -i'
alias cp='cp -i'

# More convenient command for airport
[ "$OSNAME" = "macOS" ] && alias airport='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport'

# Use macOS's open command on other OSs
__exists xdg-open && alias open='xdg-open'

# Misc
alias cdu='cd ..'
alias ls='ls --color=auto'
alias grep='grep --color=auto --exclude-dir "\.git" --exclude-dir __pycache__ --exclude-dir "*\.egg-info"'
alias tmpdir='cd "$(mktemp -d)"'
alias ta='tmux attach-session -t'
alias metaflaclist='metaflac --list --block-type=VORBIS_COMMENT'
alias wgetindex='wget --recursive --no-parent --reject "index.html*"'
alias hstat='curl -o /dev/null --silent --head --write-out "%{http_code}\n"'
alias htpasswd='printf "username: " && read -r u && [ -n "$u" ] && p="$(openssl passwd -apr1)" && printf "%s:%s\n" "$u" "$p"'

# Allow quering the OS DNS cache
if [ "$OSNAME" = "macOS" ]; then
    getaddrinfo(){
        dscacheutil -q host -a name "$1" | grep "_address" | cut --delimiter=' ' --fields=2 | sort --uniq
    }
else
    getaddrinfo(){
        getent ahosts "$1" | cut --delimiter=' ' --fields=1 | sort --uniq
    }
fi

# Drop-in command upgrades
__exists bat && alias cat='bat --style=plain --pager=never'
__exists lsd && alias ls='lsd --icon=never'
__exists tre && alias tree='tre'

# Grep within python files
if __exists rg; then
    # rg respects .gitignore files so exclude patterns shouldn't be needed
    alias pygrep='rg --follow --iglob "*\.py"'
else
    # grep has been aliased to exclude a bunch of things above
    alias pygrep='grep --recursive --include "*\.py"'
fi

# Alias for "source .venv/bin/activate"
svba() {
    . "${1:-.venv}/bin/activate"
}

# vim, git add (exit vim with :cq to abort)
# Good for rebase conflict solving
vga() {
    vim "$1" && git add "$1"
}

mkcd() {
    mkdir -p -- "$1" && cd -- "$1"
}

# cd to the frontmost Finder window (easy "open prompt here")
if [ "$OSNAME" = "macOS" ]; then
    cdf () {
        d="$(osascript -e 'tell application "Finder" to return POSIX path of (folder of the front window as alias)' 2>/dev/null)"
        # Let cd fail and return the error if the path is invalid
        # shellcheck disable=SC2164
        [ -n "$d" ] && cd "$d"
    }
fi

if __exists fzf; then
    # Fuzzy kill
    # Prioritizes high-cpu processes by combining -r (ps) and --tiebreak=index (fzf)
    fkill(){
        ps -Arc -opid=,user=,pcpu=,rss=,command= |\
            fzf --with-nth="2.." --multi --tiebreak=index |\
            awk '{print $1}' |\
            xargs kill "$@" --
    }
fi

if __exists yt-dlp; then
    alias youtube-dl='yt-dlp'
    alias yt-dlp-music='yt-dlp --add-metadata --write-thumbnail --extract-audio --format flac/bestaudio/best --output "%(artist,uploader|Unknown Artist)s/%(album,playlist|Unknown Album)s/%(track_number|0)02d - %(track,title|Unknown Track)s.%(ext)s"'
fi

# Use https://localhost.run to publicly serve a local HTTP port
localhost.run() {
    if [ $# -lt 1 ]; then
        echo "ERROR: pass the port to remotely serve"
        return 1
    fi
    ssh -R 80:localhost:"$1" nokey@localhost.run
}
