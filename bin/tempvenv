#!/bin/bash

# Creates a temporary python virtual environment and enters it
# When deactivating/exiting, the venv is deleted
# Optionally takes a binary to use as the venv's python interpreter (default python3)

set -eu

if [ -n "${VIRTUAL_ENV:-}" ]; then
    echo "ERROR: Already in a virtual environment ( $VIRTUAL_ENV )"
    exit 1
fi

python="${1:-python3}"
venvdir="${XDG_CACHE_HOME:-$HOME/.cache}/tempvenv"

mkdir -p "$venvdir"

tmp=$(mktemp --tmpdir="$venvdir" --directory "venv-XXX")
trap 'rm -rf "$tmp"' EXIT

# Prefer virtualenv (faster, compatible with python2),
# fall back to python with isolation (python3.4+),
# fall back to non-isolated python,
# Otherwise error out
virtualenv --quiet --python "$python" "$tmp" &>/dev/null || \
    "$python" -I -m venv "$tmp" &>/dev/null || \
    "$python" -m venv "$tmp" &>/dev/null || \
    (echo "Failed to create venv with interpreter $python" && exit 1)

# Run a non-login shell that sources the venv
$SHELL --rcfile <( echo "
source $HOME/.bashrc 2>/dev/null || source /etc/bashrc 2>/dev/null
source \"$tmp/bin/activate\" || exit 1
alias deactivate=exit
echo '==============================='
echo \"Now in temporary $python venv\"
echo \"$tmp\"
echo '==============================='
" ) || :
